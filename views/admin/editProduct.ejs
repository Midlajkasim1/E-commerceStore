<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background-color: #1a202c;
            color: #a0aec0;
            font-family: system-ui, -apple-system, sans-serif;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .content-main {
            max-width: 800px;
            margin: 0 auto;
            padding: 48px 20px;
        }

        .content-title {
            color: #fff;
            font-size: 1.5rem;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #2d3748;
        }

        .main-container {
            background-color: #1f2937;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            color: #a0aec0;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-control, .form-select {
            width: 100%;
            background-color: #2d3748;
            border: 1px solid #4a5568;
            color: #fff;
            padding: 12px;
            border-radius: 6px;
            font-size: 0.875rem;
            transition: all 0.2s;
            box-sizing: border-box;
        }

        /* Specific styling for product name input */
        input[name="productName"] {
            width: 100%;
            margin-bottom: 1rem;
        }

        /* Specific styling for description textarea */
        textarea[name="description"] {
            width: 100%;
            min-height: 120px;
            resize: vertical;
            margin-bottom: 1rem;
        }

        /* Specific styling for color input */
        input[name="color"] {
            width: 100%;
            margin-bottom: 1rem;
        }

        .form-control:focus, .form-select:focus {
            outline: none;
            border-color: #7c3aed;
            box-shadow: 0 0 0 2px rgba(124, 58, 237, 0.2);
        }

        .grid-3 {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
        }
        .thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
}

.thumbnail {
    position: relative;
    width: 100px;
    height: 100px;
}

.thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
}

.remove-icon {
    position: absolute;
    top: -8px;
    right: -8px;
    background-color: #ff4444;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    cursor: pointer;
    font-weight: bold;
}

.preview-container {
    position: relative;
    max-width: 400px;
    margin-bottom: 1rem;
}

.preview-image, .cropped-preview {
    max-width: 100%;
    display: none;
}

.image-cropper {
    display: none;
    margin-top: 1rem;
}

        .image-upload-section {
            margin-top: 2rem;
        }

        .card-header {
            color: #fff;
            font-size: 1rem;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #2d3748;
        }

        .thumbnails-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .error-message {
            color: #fc8181;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }
         /* New styles for size inputs */
         .sizes-container {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .size-input {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .size-input label {
            color: #a0aec0;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .size-input input {
            width: 100%;
            background-color: #2d3748;
            border: 1px solid #4a5568;
            color: #fff;
            padding: 8px;
            border-radius: 6px;
            font-size: 0.875rem;
            transition: all 0.2s;
        }

        .size-input input:focus {
            outline: none;
            border-color: #7c3aed;
            box-shadow: 0 0 0 2px rgba(124, 58, 237, 0.2);
        }


        .submit-button {
            background-color: #7c3aed;
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            width: 100%;
            margin-top: 2rem;
            transition: background-color 0.2s;
        }

        .submit-button:hover {
            background-color: #6d28d9;
        }

        .image-cropper {
            margin: 1rem 0;
            background-color: #2d3748;
            padding: 1rem;
            border-radius: 6px;
        }

        .btn-primary {
            background-color: #7c3aed;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 1rem;
        }

        @media (max-width: 768px) {
            .grid-3 {
                grid-template-columns: 1fr;
            }

            .main-container {
                padding: 20px;
            }
        }
          /* Your existing styles */
          .alert {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
    <%- include("../../views/partials/admin/header") %>

    <section class="content-main">
        <h2 class="content-title">Edit Product</h2>
        
      
        <div class="main-container">
  
            <form id="productForm" action="/admin/products/editProduct/<%= product._id %>" enctype="multipart/form-data" method="POST" >
                <!-- Basic Information -->
                <div class="form-section">
                    <div class="form-group">
                        <label class="form-label"  for="product_name">Product Name</label>
                        <input type="text"   class="form-control" id="product_name" name="productName" value="<%=product.productName%>"  placeholder="Type here">
                        <div id="productName-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="descriptionid">Description</label>
                        <textarea   class="form-control" id="descriptionid" value="<%=product.description%>" name="description" rows="4" ><%=product.description%></textarea>
                        <div id="description-error" class="error-message"></div>
                    </div>
                </div>

                <!-- Pricing and Inventory -->
                <div class="form-section">
                    <div class="grid-3">
                        <div class="form-group">
                            <label class="form-label">Regular Price</label>
                            <input type="text"  class="form-control" name="regularPrice" value="<%=product.regularPrice%>" >
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Sale Price</label>
                            <input type="text" class="form-control" name="salePrice" value="<%=product.salePrice%>" >
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Quantity</label>
                            <input type="text"  class="form-control" name="quantity" value="<%=product.totalQuantity %>" >
                            <div id="quantity-error" class="error-message"></div>
                        </div>
                    </div>
                </div>

                <!-- Product Details -->
                <div class="form-section">
                    <div class="form-group"> 
                        <label class="form-label">Category</label>
                        <select class="form-select" name="category">
                            <% for (let i = 0; i < cat.length; i++) { %>
                                <option value="<%= cat[i]._id %>" <%= (product.category && product.category._id.toString() === cat[i]._id.toString()) ? 'selected' : '' %>>
                                    <%= cat[i].name %>
                                </option>
                            <% } %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Sizes Available</label>
                        <div class="sizes-container">
                            <div class="size-input">
                                <label>S:</label>
                                <input  type="text" name="sizeS" value="<%= product.size.sizeS %>">
                                <div id="sizeS-error" class="error-message"></div>
                            </div>
                            <div class="size-input">
                                <label>M:</label>
                                <input  type="text" name="sizeM"value="<%= product.size.sizeM %>">
                                <div id="sizeM-error" class="error-message"></div>
                            </div>
                            <div class="size-input">
                                <label>L:</label>
                                <input  type="text" name="sizeL" value="<%= product.size.sizeL %>">
                                <div id="sizeL-error" class="error-message"></div>
                            </div>
                            <div class="size-input">
                                <label>XL:</label>
                                <input  type="text" name="sizeXL" value="<%= product.size.sizeXL %>">
                                <div id="sizeXL-error" class="error-message"></div>
                            </div>
                            <div class="size-input">
                                <label>XXL:</label>
                                <input  type="text" name="sizeXXL" value="<%= product.size.sizeXXL %>">
                                <div id="sizeXXL-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label  class="form-label">Color</label>
                        <input type="text" value="<%=product.color%>" class="form-control" name="color" placeholder="Red, Blue, Green...">
                        <div id="color-error" class="error-message"></div>
                    </div>
                </div>

             <!-- Image Upload -->
<!-- Image Upload -->
<div id="addedImagesContainer" class="thumbnails-container">
    <!-- Existing images will be displayed here -->
    <%for(let i=0; i<product.productImage.length; i++){%>
        <div class="thumbnail" data-image="<%=product.productImage[i]%>">
            <img class="rounded" src="/uploads/re-image/<%=product.productImage[i]%>" alt="Product Image">
            <span class="remove-icon" onclick="deleteSingleImage('<%=product.productImage[i]%>', '<%=product._id%>')">×</span>
        </div>
    <%}%>
</div>

<div class="image-upload-section">
    <h3 class="card-header">Product Images</h3>
    
    <div id="imageUploadContainer">
        <!-- Initial image upload section -->
        <div class="form-section" id="imageSection1">
            <div class="form-group">
                <div class="preview-container">
                    <img src="" id="imgView1" alt="" class="preview-image">
                    <img src="" id="croppedImg1" alt="" class="cropped-preview">
                </div>
                <input class="form-control" type="file" name="images" id="input1" 
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage(event, 1)">
                <div class="image-cropper">
                    <button type="button" id="saveButton1" class="btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="form-group mt-4">
        <button type="button" class="btn-primary" id="addMoreImages" onclick="addImageSection()">
            Add More Images
        </button>
    </div>
</div>


                <button type="submit" class="submit-button" id="sbmtBtn">Upload</button>
            </form>
        </div>
        
    </section>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

        <script>
             
  
          function viewImage1(event) {
    document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0]);
}

//
let croppers = {};
let imageCounter = 1;
$(document).ready(function() {
            console.log('jQuery is loaded:', typeof jQuery !== 'undefined');
        });

        // Updated deleteSingleImage function
        function deleteSingleImage(imageId, productId) {
            console.log('Deleting image:', imageId, 'from product:', productId);
            
            if (!productId || !imageId) {
                alert('Invalid product or image ID');
                return;
            }

            // Add loading state
            const thumbnail = document.querySelector(`.thumbnail[data-image="${imageId}"]`);
            if (thumbnail) {
                thumbnail.style.opacity = '0.5';
            }

            // Make sure jQuery and $ are defined
            if (typeof jQuery === 'undefined') {
                console.error('jQuery is not loaded!');
                return;
            }

            // Perform the AJAX request
            $.ajax({
                url: `/admin/products/editProduct/deleteImage/${productId}`,
                type: 'POST',
                data: {
                    imageNameToServer: imageId
                },
                success: function(response) {
                    // console.log('Success response:', response);
                    if (response.status === true) {
                        // Remove the thumbnail element
                        if (thumbnail) {
                            thumbnail.remove();
                        }
                        // Optional: Show success message
                    } else {
                        alert('Error: ' + (response.message || 'Failed to delete image'));
                        // Reset opacity if failed
                        if (thumbnail) {
                            thumbnail.style.opacity = '1';
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', {xhr, status, error});
                    alert('Failed to delete image. Please try again.');
                    // Reset opacity if failed
                    if (thumbnail) {
                        thumbnail.style.opacity = '1';
                    }
                }
            });
        }



function addImageSection() {
    imageCounter++;
    
    const container = document.getElementById('imageUploadContainer');
    const newSection = document.createElement('div');
    newSection.className = 'form-section';
    newSection.id = `imageSection${imageCounter}`;
    
    newSection.innerHTML = `
        <div class="form-group">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h4 class="m-0">Image ${imageCounter}</h4>
                <button type="button" class="btn-danger" 
                    onclick="removeImageSection(${imageCounter})">Remove</button>
            </div>
            <div class="preview-container">
                <img src="" id="imgView${imageCounter}" alt="" class="preview-image">
                <img src="" id="croppedImg${imageCounter}" alt="" class="cropped-preview">
            </div>
            <input class="form-control" type="file" name="images" id="input${imageCounter}" 
                accept="image/png, image/jpeg, image/jpg"
                onchange="viewImage(event, ${imageCounter})">
            <div class="image-cropper">
                <button type="button" id="saveButton${imageCounter}" class="btn-primary">Save</button>
            </div>
        </div>
    `;
    
    container.appendChild(newSection);
}

function removeImageSection(index) {
    if (croppers[index]) {
        croppers[index].destroy();
        delete croppers[index];
    }
    
    const thumbnail = document.querySelector(`.thumbnail[data-index="${index}"]`);
    if (thumbnail) {
        thumbnail.remove();
    }
    
    const section = document.getElementById(`imageSection${index}`);
    if (section) {
        section.remove();
    }
}

function viewImage(event, index) {
    const fileInput = event.target;
    const file = fileInput.files[0];
    const imageElement = document.getElementById(`imgView${index}`);
    const croppedPreview = document.getElementById(`croppedImg${index}`);
    const cropperContainer = document.querySelector(`#imageSection${index} .image-cropper`);

    if (!file) return;

    // Clear existing cropper
    if (croppers[index]) {
        croppers[index].destroy();
        delete croppers[index];
    }

    // Show preview
    imageElement.src = URL.createObjectURL(file);
    imageElement.style.display = 'block';
    croppedPreview.style.display = 'none';

    // Initialize cropper
    imageElement.onload = function() {
        croppers[index] = new Cropper(imageElement, {
            aspectRatio: 1,
            viewMode: 1,
            background: false,
            autoCropArea: 1,
            zoomable: true,
            cropBoxResizable: true,
            cropBoxMovable: true,
            guides: true
        });

        cropperContainer.style.display = 'block';
    };

    // Handle save
    document.getElementById(`saveButton${index}`).onclick = function() {
        if (!croppers[index]) return;

        const croppedCanvas = croppers[index].getCroppedCanvas({
            width: 400,
            height: 400,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });

        // Update preview
        croppedPreview.src = croppedCanvas.toDataURL('image/jpeg', 0.9);
        croppedPreview.style.display = 'block';
        imageElement.style.display = 'none';

        // Convert to file and update input
        croppedCanvas.toBlob((blob) => {
            const fileName = `cropped-image-${index}.jpg`;
            const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
            
            // Update file input
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            fileInput.files = dataTransfer.files;

            // Update thumbnail
            updateThumbnail(croppedFile, index);
        }, 'image/jpeg', 0.9);

        // Cleanup
        croppers[index].destroy();
        delete croppers[index];
        cropperContainer.style.display = 'none';
    };
}

function updateThumbnail(file, index) {
    const container = document.getElementById('addedImagesContainer');
    
    // Remove existing thumbnail for this index
    const existingThumbnail = container.querySelector(`.thumbnail[data-index="${index}"]`);
    if (existingThumbnail) {
        existingThumbnail.remove();
    }
    
    // Create new thumbnail
    const thumbnail = document.createElement('div');
    thumbnail.className = 'thumbnail';
    thumbnail.setAttribute('data-index', index);
    
    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);
    img.alt = `Image ${index}`;
    
    const removeIcon = document.createElement('span');
    removeIcon.className = 'remove-icon';
    removeIcon.textContent = '×';
    removeIcon.onclick = () => {
        thumbnail.remove();
        document.getElementById(`input${index}`).value = '';
        document.getElementById(`croppedImg${index}`).style.display = 'none';
    };
    
    thumbnail.appendChild(img);
    thumbnail.appendChild(removeIcon);
    container.appendChild(thumbnail);
}
  
 
      
document.getElementById('sbmtBtn').addEventListener('click', (event)=>{
    clearErrorMessages();
    const name = document.getElementsByName('productName')[0].value;
              const description = document.getElementById('descriptionid').value;
              const price = document.getElementsByName('regularPrice')[0].value;
              const saleprice = document.getElementsByName('salePrice')[0].value;
              const color = document.getElementsByName('color')[0].value;
              const category = document.getElementsByName('category')[0].value;
              const quantity = document.getElementsByName('quantity')[0].value;
              
              // Add size validation
              const sizeS = document.getElementsByName('sizeS')[0].value;
              const sizeM = document.getElementsByName('sizeM')[0].value;
              const sizeL = document.getElementsByName('sizeL')[0].value;
              const sizeXL = document.getElementsByName('sizeXL')[0].value;
              const sizeXXL = document.getElementsByName('sizeXXL')[0].value;
  
              let isValid = true;
  
              // Existing validation
              if (name.trim() === "") {
                event.preventDefault()
                  displayErrorMessage('productName-error', 'Please enter a product name.');
                  isValid = false;
                  return
              }
              
              // Add size validation logic
              const validateSize = (size, errorId) => {
                  if (size && !/^\d+$/.test(size)) {
                      displayErrorMessage(errorId, 'Please enter a valid number');
                      isValid = false;
                      return
                  }
              };
  
              validateSize(sizeS, 'sizeS-error');
              validateSize(sizeM, 'sizeM-error');
              validateSize(sizeL, 'sizeL-error');
              validateSize(sizeXL, 'sizeXL-error');
              validateSize(sizeXXL, 'sizeXXL-error');
  
              // Rest of the existing validation
              if (description.trim() === "") {
                event.preventDefault()
                  displayErrorMessage('description-error', 'Please enter a product description.');
                  isValid = false;
                  return
              } 
  
              if (parseInt(quantity) < 0) {
                event.preventDefault()
                  displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                  isValid = false;
                  return
              }
  
              if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                event.preventDefault()
                  displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
                  return
              }
  
              if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                event.preventDefault()
                  displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
                  return
              }
  
              if (parseFloat(price) <= parseFloat(saleprice)) {
                event.preventDefault()
                  displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                  isValid = false;
                  return
              }
  
              if (color.trim() === "") {
                event.preventDefault()
                  displayErrorMessage('color-error', 'Please enter a color.');
                  isValid = false;
                  return
              }


              function displayErrorMessage(elementId, message) {
              var errorElement = document.getElementById(elementId);
              errorElement.innerText = message;
              errorElement.style.display = "block";
          }
  
          function clearErrorMessages() {
              const errorElements = document.getElementsByClassName('error-message');
              Array.from(errorElements).forEach(element => {
                  element.innerText = '';
              });
          }
})



      </script>
</script>
        
       
   
</body>
</html>