<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
  <style>
    .breadcrumb a {
      color: #088178;
      text-decoration: none;
    }

    .breadcrumb span {
      margin: 0 10px;
      color: #666;
    }

    .checkout-banner {
      background: linear-gradient(rgba(17, 18, 18, 0.9), rgba(8, 129, 120, 0.8)),
                  url('/api/placeholder/1200/300') center/cover;
      padding: 60px 0;
      margin-bottom: 40px;
      position: relative;
    }

    .banner-content {
      text-align: center;
      color: #ffffff;
    }

    .banner-content h1 {
      font-size: 42px;
      font-weight: 700;
      margin-bottom: 15px;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .checkout-section {
      background: #ffffff;
      border-radius: 12px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
    }

    .section-title {
      color: #2c3e50;
      margin-bottom: 25px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    /* Address Section Styles */
    .add-address-btn {
      background-color: #088178;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 20px;
      font-size: 14px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .add-address-btn:hover {
      background-color: #066661;
      color: white;
    }

    .saved-address {
      border: 2px solid #e9ecef;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      position: relative;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .saved-address:hover {
      border-color: #088178;
      transform: translateY(-2px);
    }

    .saved-address.selected {
      border-color: #088178;
      background-color: #f8fffe;
    }

    .address-type {
      display: inline-flex;
      align-items: center;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
      margin-bottom: 15px;
    }

    .address-type i {
      margin-right: 6px;
      font-size: 14px;
    }

    .address-type.home {
      background-color: #e8f5e9;
      color: #2e7d32;
    }

    .address-type.work {
      background-color: #e3f2fd;
      color: #1976d2;
    }

    .address-type.other {
      background-color: #f3e5f5;
      color: #7b1fa2;
    }

    .address-content {
      display: flex;
      gap: 15px;
    }

    .address-icon {
      flex-shrink: 0;
      color: #6c757d;
      font-size: 20px;
      margin-top: 3px;
    }

    .address-details h6 {
      margin-bottom: 8px;
      color: #2c3e50;
      font-weight: 600;
    }

    .address-details p {
      margin-bottom: 5px;
      color: #6c757d;
      font-size: 14px;
      line-height: 1.5;
    }

    .address-actions {
      position: absolute;
      right: 20px;
      top: 20px;
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .action-btn {
      background: none;
      border: none;
      padding: 5px;
      color: #6c757d;
      transition: all 0.2s ease;
    }

    .action-btn:hover {
      color: #088178;
    }

    /* Payment Method Styles */
    .payment-method {
      border: 2px solid #e9ecef;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 15px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .payment-method:hover {
      border-color: #088178;
      transform: translateY(-2px);
    }

    .payment-method.selected {
      border-color: #088178;
      background-color: #f8fffe;
    }

    .payment-method-left {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .payment-method img {
      width: 40px;
      height: 40px;
      object-fit: contain;
    }

    .payment-info {
      flex-grow: 1;
    }

    .payment-label {
      font-weight: 600;
      color: #2c3e50;
      margin: 0;
    }

    .payment-description {
      font-size: 13px;
      color: #6c757d;
      margin: 0;
    }

    /* Order Summary Styles */
    .order-summary {
      position: sticky;
      top: 20px;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e9ecef;
      color: #2c3e50;
    }

    .summary-item.total {
      font-size: 1.2em;
      font-weight: bold;
      color: #088178;
      border-top: 2px solid #e9ecef;
      border-bottom: none;
      padding-top: 15px;
    }

    .place-order-btn {
      background-color: #088178;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 15px 30px;
      width: 100%;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .place-order-btn:hover {
      background-color: #066661;
      transform: translateY(-2px);
    }

    .form-check-input {
      width: 20px;
      height: 20px;
      margin-top: 0;
      cursor: pointer;
    }

    .form-check-input:checked {
      background-color: #088178;
      border-color: #088178;
    }

    /* Modal Styles */
    .modal-header {
      border-bottom: 2px solid #e9ecef;
    }

    .modal-footer {
      border-top: 2px solid #e9ecef;
    }

    .form-label {
      color: #2c3e50;
      font-weight: 500;
    }

    .form-control, .form-select {
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #e9ecef;
    }

    .form-control:focus, .form-select:focus {
      border-color: #088178;
      box-shadow: 0 0 0 0.2rem rgba(8, 129, 120, 0.25);
    }

    @media (max-width: 991px) {
      .order-summary {
        position: static;
        margin-top: 30px;
      }
    }

    @media (max-width: 768px) {
      .checkout-banner {
        padding: 40px 0;
      }
      
      .banner-content h1 {
        font-size: 32px;
      }

      .section-title {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start;
      }
      
      .add-address-btn {
        width: 100%;
        justify-content: center;
      }
    }
    .place-order-btn {
  background-color: #088178;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 15px 30px;
  width: 100%;
  font-weight: 500;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.place-order-btn:hover {
  background-color: #066661;
  transform: translateY(-2px);
}

.place-order-btn i {
  font-size: 16px;
}
  </style>
</head>
<body>
  <div class="container my-4">
    <!-- Breadcrumb -->
    <div class="breadcrumb">
      <a href="/">Home</a>
      <span>/</span>
      <a href="/cart">Cart</a>
      <span>/</span>
      <a href="/checkout">Checkout</a>
    </div>

    <!-- Checkout Banner -->
    <div class="checkout-banner">
      <div class="container">
        <div class="banner-content">
          <h1>Checkout</h1>
        </div>
      </div>
    </div>

    <div class="row">
      <!-- Main Content -->
      <div class="col-lg-8">
        <!-- Address Section -->
        <div class="checkout-section">
          <div class="section-title">
            <h4 class="mb-0">Shipping Address</h4>
            <button class="add-address-btn" data-bs-toggle="modal" data-bs-target="#addAddressModal">  <i class="bi bi-plus-lg"></i> Add New Address
            </button>
          </div>

          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach((address, index) => { %>
              <div class="saved-address <%= index === 0 ? 'selected' : '' %>"
                   data-address-id="<%= address._id %>"
                   onclick="selectAddress('<%= address._id %>')">
                <span class="address-type <%= address.addressType.toLowerCase() %>">
                  <i class="bi bi-<%= address.addressType.toLowerCase() === 'home' ? 'house-fill' : 
                                   address.addressType.toLowerCase() === 'work' ? 'briefcase-fill' : 'geo-alt-fill' %>"></i>
                  <%= address.addressType.toUpperCase() %>
                </span>
                <div class="address-actions">
                  <button class="action-btn" onclick="handleEditClick('<%= address._id %>', '<%= address.addressType %>', '<%= address.name %>', '<%= address.phone %>', '<%= address.altPhone %>', '<%= address.landMark %>', '<%= address.city %>', '<%= address.state %>', '<%= address.pincode %>')">
                    <i class="bi bi-pencil"></i>
                  </button>
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="address" value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %>>
                  </div>
                </div>
                <div class="address-content">
                  <i class="bi bi-geo-alt address-icon"></i>
                  <div class="address-details">
                    <h6><%= address.name %></h6>
                    <p><%= address.landMark %><br>
                       <%= address.city %>, <%= address.state %><br>
                       <%= address.pincode %></p>
                    <p>Phone: <%= address.phone %><br>
                       Alt Phone: <%= address.altPhone %></p>
                  </div>
                </div>
              </div>
            <% }); %>
          <% } %>
        </div>

        <!-- Payment Method Section -->
        <div class="checkout-section">
          <h4 class="section-title">Payment Method</h4>
          
          <div class="payment-method selected">
            <div class="payment-method-left">
              <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" value="COD" checked>
              </div>
              <img src="/api/placeholder/60/40" alt="Cash on Delivery">
              <div class="payment-info">
                <p class="payment-label">Cash on Delivery</p>
                <p class="payment-description">Pay when you receive your order</p>
              </div>
            </div>
          </div>

          <div class="payment-method">
            <div class="payment-method-left">
              <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" value="ONLINE">
              </div>
              <img src="/api/placeholder/60/40" alt="Online Payment">
              <div class="payment-info">
                <p class="payment-label">Online Payment</p>
                <p class="payment-description">Credit/Debit Card, UPI, Net Banking</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="col-lg-4">
        <div class="checkout-section order-summary">
          <h4 class="section-title">Order Summary</h4>
          <div class="summary-item">
            <span>Subtotal</span>
            <span>₹<%= subtotal.toFixed(2) %></span>
          </div>
          <div class="summary-item">
            <span>Shipping</span>
            <span>₹<%= shipping.toFixed(2) %></span>
          </div>
          <div class="summary-item">
            <span>Tax</span>
            <span>₹<%= tax.toFixed(2) %></span>
          </div>
          <div class="summary-item total">
            <span>Total</span>
            <span>₹<%= total.toFixed(2) %></span>
          </div>
          <button  class="place-order-btn" onclick="placeOrder()">
            <i class="bi bi-lock-fill"></i>
            Place Order
          </button>
        </div>
      </div>
    </div>
  </div>

 <!-- Add Address Modal -->
 <div class="modal fade" id="addAddressModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addressForm" action="/checkout-addAddress" method="post">
          <div class="row g-3">
            <div class="col-12">
              <label class="form-label">Address Type *</label>
              <select class="form-select" name="addressType" required>
                <option value="">Select Address Type</option>
                <option value="home">Home</option>
                <option value="work">Work</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div class="col-12">
              <label class="form-label">Full Name *</label>
              <input type="text" class="form-control" name="name" required>
            </div>

            <div class="col-md-6">
              <label class="form-label">Phone Number *</label>
              <input type="tel" class="form-control" name="phone" required>
            </div>

            <div class="col-md-6">
              <label class="form-label">Alternate Phone Number *</label>
              <input type="tel" class="form-control" name="altPhone" required>
            </div>

            <div class="col-12">
              <label class="form-label">Landmark *</label>
              <input type="text" class="form-control" name="landMark" required>
            </div>

            <div class="col-md-4">
              <label class="form-label">City *</label>
              <input type="text" class="form-control" name="city" required>
            </div>

            <div class="col-md-4">
              <label class="form-label">State *</label>
              <input type="text" class="form-control" name="state" required>
            </div>

            <div class="col-md-4">
              <label class="form-label">PIN Code *</label>
              <input type="number" class="form-control" name="pincode" required>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" form="addressForm" class="btn add-address-btn">Save Address</button>
      </div>
    </div>
  </div>
</div>

 <!-- Edit Address Modal -->
 <div class="modal fade" id="editAddressModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title">Edit Address</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
              <form id="editAddressForm" action="/checkout/edit-address" method="post">
                  <input type="hidden" name="addressId" id="editAddressId">
                  <div class="row g-3">
                      <div class="col-12">
                          <label class="form-label">Address Type *</label>
                          <select class="form-select" name="addressType" id="editAddressType" required>
                              <option value="">Select Address Type</option>
                              <option value="home">Home</option>
                              <option value="work">Work</option>
                              <option value="other">Other</option>
                          </select>
                      </div>

                      <div class="col-12">
                          <label class="form-label">Full Name *</label>
                          <input type="text" class="form-control" name="name" id="editName" required>
                      </div>

                      <div class="col-md-6">
                          <label class="form-label">Phone Number *</label>
                          <input type="tel" class="form-control" name="phone" id="editPhone" required>
                      </div>

                      <div class="col-md-6">
                          <label class="form-label">Alternate Phone Number *</label>
                          <input type="tel" class="form-control" name="altPhone" id="editAltPhone" required>
                      </div>

                      <div class="col-12">
                          <label class="form-label">Landmark *</label>
                          <input type="text" class="form-control" name="landMark" id="editLandmark" required>
                      </div>

                      <div class="col-md-4">
                          <label class="form-label">City *</label>
                          <input type="text" class="form-control" name="city" id="editCity" required>
                      </div>

                      <div class="col-md-4">
                          <label class="form-label">State *</label>
                          <input type="text" class="form-control" name="state" id="editState" required>
                      </div>

                      <div class="col-md-4">
                          <label class="form-label">PIN Code *</label>
                          <input type="number" class="form-control" name="pincode" id="editPincode" required>
                      </div>
                  </div>
              </form>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" form="editAddressForm" class="btn add-address-btn">Update Address</button>
          </div>
      </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>`;

<script>
  // Function to handle edit button click
  // function handleEditClick(addressId, addressType, name, phone, altPhone, landMark, city, state, pincode) {
  //   // Fill the edit form with existing data
  //   document.getElementById('editAddressId').value = addressId;
  //   document.getElementById('editAddressType').value = addressType;
  //   document.getElementById('editName').value = name;
  //   document.getElementById('editPhone').value = phone;
  //   document.getElementById('editAltPhone').value = altPhone;
  //   document.getElementById('editLandmark').value = landMark;
  //   document.getElementById('editCity').value = city;
  //   document.getElementById('editState').value = state;
  //   document.getElementById('editPincode').value = pincode;
    
  //   // Open the edit modal
  //   const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
  //   editModal.show();
  // }
  
  // Form submission handlers
  document.getElementById('addAddressForm').addEventListener('submit', function(e) {
    e.preventDefault();
    // Handle add address form submission
    const formData = new FormData(this);
    // Add your API call or data handling logic here
    
    // Close the modal after submission
    const modal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
    modal.hide();
  });
  
  document.getElementById('editAddressForm').addEventListener('submit', function(e) {
    e.preventDefault();
    // Handle edit address form submission
    const formData = new FormData(this);
    // Add your API call or data handling logic here
    
    // Close the modal after submission
    const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
    modal.hide();
  });
  document.getElementById('addressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const formData = new FormData(e.target);
        const addressData = Object.fromEntries(formData.entries());
        
        const response = await fetch('/checkout-addAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData)
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
            // Show success message
            alert('Address added successfully!');
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('addAddressModal')).hide();
            // Redirect to profile page
            window.location.href = '/userProfile';
        } else {
            // Show specific error message from server
            alert(result.error || 'Unable to save address. Please try again.');
        }
    } catch (error) {
        console.error('Error details:', error);
        alert('Unable to save address. Please check your connection and try again.');
    }
});


function handleEditClick(id, type, name, phone, altPhone, landmark, city, state, pincode) {
    console.log('Edit clicked with ID:', id); // Add debug logging
    
    // Populate the edit form
    document.getElementById('editAddressId').value = id;
    document.getElementById('editAddressType').value = type.toLowerCase();
    document.getElementById('editName').value = name;
    document.getElementById('editPhone').value = phone;
    document.getElementById('editAltPhone').value = altPhone;
    document.getElementById('editLandmark').value = landmark;
    document.getElementById('editCity').value = city;
    document.getElementById('editState').value = state;
    document.getElementById('editPincode').value = pincode;

    // Show the modal
    const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
    editModal.show();
}

// Handle edit form submission
document.getElementById('editAddressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const formData = new FormData(e.target);
        const addressData = Object.fromEntries(formData.entries());
        
        console.log('Submitting address data:', addressData); // Add debug logging
        
        const response = await fetch('/checkout/edit-address', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData)
        });
        
        const result = await response.json();
        console.log('Server response:', result); // Add debug logging
        
        if (result.success) {
            alert('Address updated successfully!');
            window.location.reload();
        } else {
            alert(result.message || 'Unable to update address. Please try again.');
        }
    } catch (error) {
        console.error('Error details:', error);
        alert('Unable to update address. Please check your connection and try again.');
    }
});


// Function to select address
function selectAddress(addressId) {
  const addressElements = document.querySelectorAll('.saved-address');
  addressElements.forEach(el => el.classList.remove('selected'));
  
  const selectedAddress = document.querySelector(`[data-address-id="${addressId}"]`);
  if (selectedAddress) {
    selectedAddress.classList.add('selected');
    // Update the radio button
    const radioButton = selectedAddress.querySelector('input[type="radio"]');
    if (radioButton) {
      radioButton.checked = true;
    }
  }
}
async function placeOrder() {
    const selectedAddress = document.querySelector('.saved-address.selected');
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress || !selectedPayment) {
        await Swal.fire({
            icon: 'warning',
            title: 'Please Select',
            text: 'Please select both shipping address and payment method',
            confirmButtonColor: '#088178'
        });
        return;
    }

    let loadingAlert;

    try {
        loadingAlert = Swal.fire({
            title: 'Processing Order',
            html: 'Please wait while we confirm your order...',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch('/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                addressId: selectedAddress.dataset.addressId,
                paymentMethod: selectedPayment.value
            })
        });

        const result = await response.json();
        Swal.close();

        console.log('Order Response:', result);

        if (result.success && result.orderId) {
            await Swal.fire({
                icon: 'success',
                title: 'Order Placed Successfully!',
                text: 'Thank you for your purchase',
                confirmButtonColor: '#088178',
                timer: 2000,
                timerProgressBar: true
            });

            window.location.href = '/';
        } else {
            throw new Error(result.message || 'Failed to place order');
        }
    } catch (error) {
        console.error('Order placement error:', error);

        if (loadingAlert) Swal.close();

        await Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Failed to place order. Please try again.',
            confirmButtonColor: '#088178'
        });
    }
}


// async function placeOrder() {
//     const selectedAddress = document.querySelector('.saved-address.selected');
//     const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    
//     if (!selectedAddress || !selectedPayment) {
//         alert('Please select both shipping address and payment method');
//         return;
//     }

//     try {
//         const response = await fetch('/place-order', {
//             method: 'POST',
//             headers: {
//                 'Content-Type': 'application/json'
//             },
//             body: JSON.stringify({
//                 addressId: selectedAddress.dataset.addressId,
//                 paymentMethod: selectedPayment.value
//             })
//         });

//         const result = await response.json();
        
//         if (result.success) {
//             alert('Order placed successfully!');
//             window.location.href = `/order-success?orderId=${result.orderId}`;
//         } else {
//             throw new Error(result.message || 'Failed to place order');
//         }
//     } catch (error) {
//         console.error('Order placement error:', error);
//         alert(error.message || 'Failed to place order. Please try again.');
//     }
// }

// Add event listeners for address selection
document.querySelectorAll('.saved-address').forEach(address => {
    address.addEventListener('click', function() {
        document.querySelectorAll('.saved-address').forEach(a => a.classList.remove('selected'));
        this.classList.add('selected');
        this.querySelector('input[type="radio"]').checked = true;
    });
});

// Add event listeners for payment method selection
document.querySelectorAll('.payment-method').forEach(method => {
    method.addEventListener('click', function() {
        document.querySelectorAll('.payment-method').forEach(m => m.classList.remove('selected'));
        this.classList.add('selected');
        this.querySelector('input[type="radio"]').checked = true;
    });
});
  </script>