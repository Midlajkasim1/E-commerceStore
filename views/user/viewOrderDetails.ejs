<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="images/store-logo.png"> 
    <title>Order Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <style>
        /* Reuse styles from profile page */
        .breadcrumb a {
            color: #088178;
            text-decoration: none;
        }

        .breadcrumb span {
            margin: 0 10px;
            color: #666;
        }

        .orders-card {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            padding: 30px;
            margin-bottom: 30px;
        }

        .order-item {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }

        .order-item:hover {
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-5px);
        }

        .order-status {
            font-weight: 500;
            border-radius: 20px;
            padding: 5px 12px;
            font-size: 0.8rem;
        }

        .order-status.delivered {
            background-color: #d4edda;
            color: #28a745;
        }

        .order-status.pending {
            background-color: #fff3cd;
            color: #ffc107;
        }

        .order-status.cancelled {
            background-color: #f8d7da;
            color: #dc3545;
        }

        .logout-link {
            color: #dc3545;
        }

        .logout-link:hover {
            background-color: #fff5f5;
            color: #dc3545;
        }

        /* Responsive adjustments */
        @media (max-width: 991px) {
            .sidebar {
                position: static;
                margin-bottom: 30px;
            }
        }

        /* Tracking Progress Styles */
        .tracking-progress {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .tracking-step {
            text-align: center;
            flex: 1;
            position: relative;
        }

        .tracking-step.completed .icon {
            background-color: #28a745;
            color: white;
        }

        .tracking-step.active .icon {
            background-color: #ffc107;
            color: white;
        }

        .tracking-step .icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
        }

        .tracking-step p {
            margin: 0;
            font-size: 0.9rem;
            color: #666;
        }

        .tracking-line {
            flex: 1;
            height: 2px;
            background-color: #e9ecef;
            margin: 0 10px;
        }

        .tracking-line.completed {
            background-color: #28a745;
        }

        .order-item {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        /* Product Image Styles */
        .product-image {
            width: 120px;
            /* Fixed width */
            height: 120px;
            /* Fixed height */
            object-fit: cover;
            /* Ensures the image fits properly */
            border-radius: 8px;
        }

        /* Cancel Button Styles */
        .btn-cancel {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 0.9rem;
            transition: background-color 0.3s ease;
        }

        .btn-cancel:hover {
            background-color: #c82333;
        }

        /* Order Details Layout Improvements */
        .order-details-section {
            margin-bottom: 20px;
        }

        .order-details-section p {
            margin: 0;
        }

        .order-details-section strong {
            color: #333;
        }

        .cancel-reason {
            font-size: 0.9rem;
            margin-bottom: 10px;
            width: 200px;
        }
        .invoice-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        .company-details {
            flex: 1;
        }
        .company-details img {
            max-height: 60px;
            margin-bottom: 10px;
        }
        .invoice-details {
            text-align: right;
        }
        .invoice-details h1 {
            color: #088178;
            margin: 0 0 10px 0;
        }
        .shipping-address {
            margin-bottom: 30px;
        }
        .order-details table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
        }
        .order-details th {
            background: #f8f9fa;
            text-align: left;
            padding: 12px;
            border-bottom: 2px solid #ddd;
        }
        .order-details td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }
        .text-right {
            text-align: right;
        }
        .total-section {
            width: 300px;
            margin-left: auto;
        }
        .total-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
        }
        .total-row.final {
            font-weight: bold;
            border-top: 2px solid #ddd;
            margin-top: 8px;
            padding-top: 12px;
        }
        .discount {
            color: #28a745;
        }
        @media print {
            body {
                print-color-adjust: exact;
                -webkit-print-color-adjust: exact;
            }
            .no-print {
                display: none;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
</head>

<body>
    <%- include("../../views/partials/user/header") %>

        <div class="container my-4">
            <!-- Breadcrumb -->
            <div class="breadcrumb">
                <a href="/">Home</a>
                <span>/</span>
                <a href="/profile/order">My Orders</a>
                <span>/</span>
                <span>Order Details</span>
            </div>

            <div class="row mt-4">
                <!-- Sidebar -->
                <%- include("../../views/partials/user/profileSidebar") %>

                    <!-- Order Details Content -->
                    <div class="col-lg-9">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5>Order Details</h5>
                            </div>
                            <div class="card-body">
                                <!-- Ordered Items Section with Individual Tracking -->
                                <% for(let i=0; i < order.orderedItems.length; i++) { %>
                                    <div class="order-item">
                                        <!-- Individual Product Tracking -->
                                        <div class="tracking-progress">
                                            <!-- Order Placed -->
                                            <div
                                                class="tracking-step <%= ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                                <div class="icon">âœ”</div>
                                                <p>Order Placed</p>
                                            </div>
                                            <div
                                                class="tracking-line <%= ['Processing', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                            </div>

                                            <!-- Order Processed -->
                                            <div
                                                class="tracking-step <%= ['Processing', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                                <div class="icon">âœ”</div>
                                                <p>Processing</p>
                                            </div>
                                            <div
                                                class="tracking-line <%= ['Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                            </div>

                                            <!-- Shipped -->
                                            <div
                                                class="tracking-step <%= ['Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                                <div class="icon">ðŸšš</div>
                                                <p>Shipped</p>
                                            </div>
                                            <div
                                                class="tracking-line <%= ['Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                            </div>

                                            <!-- Out for Delivery -->
                                            <div
                                                class="tracking-step <%= ['Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
                                                <div class="icon">ðŸ“¦</div>
                                                <p>Out for Delivery</p>
                                            </div>
                                            <div
                                                class="tracking-line <%= order.orderedItems[i].status === 'Delivered' ? 'completed' : '' %>">
                                            </div>

                                            <!-- Delivered -->
                                            <div
                                                class="tracking-step <%= order.orderedItems[i].status === 'Delivered' ? 'completed' : '' %>">
                                                <div class="icon">âœ”</div>
                                                <p>Delivered</p>
                                            </div>
                                        </div>

                                        <!-- Product Details -->
                                        <div class="d-flex align-items-center mt-3">
                                            <img src="/uploads/re-image/<%= order.orderedItems[i].product.productImage[0] %>"
                                                alt="no image" class="product-image me-3">
                                            <div class="flex-grow-1">
                                                <h6>
                                                    <%= order.orderedItems[i].product.productName %>
                                                </h6>
                                                <p><strong>Quantity:</strong>
                                                    <%= order.orderedItems[i].quantity %>
                                                </p>
                                                <p><strong>Price:</strong> â‚¹<%= order.orderedItems[i].price %>
                                                </p>
                                                <p><strong>Size:</strong>
                                                    <%= order.orderedItems[i].size %>
                                                </p>
                                                <p><strong>Status:</strong>
                                                    <%= order.orderedItems[i].status %>
                                                </p>
                                            </div>

                                            <!-- Cancel/Return Button Section -->
<!-- Cancel/Return Button Section -->
<div class="d-flex flex-column align-items-end">
    <% if (order.orderedItems[i].status === 'Pending' ||
           order.orderedItems[i].status === 'Processing' ||
           order.orderedItems[i].status === 'Shipped' ||
           order.orderedItems[i].status === 'Out for Delivery') { %>
        <select class="form-select mb-2 cancel-reason"
                data-order-id="<%= order._id %>"
                data-product-id="<%= order.orderedItems[i].product._id %>">
            <option value="">Select Cancellation Reason</option>
            <option value="Changed My Mind">Changed My Mind</option>
            <option value="Found a Cheaper Alternative">Found a Cheaper Alternative</option>
            <option value="Incorrect Item Ordered">Incorrect Item Ordered</option>
            <option value="Delivery Taking Too Long">Delivery Taking Too Long</option>
            <option value="Product Quality Concern">Product Quality Concern</option>
            <option value="Other Reason">Other Reason</option>
        </select>
        <button class="btn btn-danger btn-sm cancel-product"
                data-order-id="<%= order._id %>"
                data-product-id="<%= order.orderedItems[i].product._id %>">
            Cancel Order
        </button>
    <% } else if (order.orderedItems[i].status === 'Delivered') { %>
        <% if (order.orderedItems[i].returnDeclinedReason) { %>
            <button class="btn btn-danger btn-sm" disabled>
                Return Declined
            </button>
            <small class="text-muted d-block mt-1">
                Reason: <%= order.orderedItems[i].returnDeclinedReason %>
            </small>
        <% } else { %>
            <select class="form-select mb-2 return-reason" 
                    data-order-id="<%= order._id %>" 
                    data-product-id="<%= order.orderedItems[i].product._id %>">
                <option value="">Select Return Reason</option>
                <option value="Wrong Size">Wrong Size</option>
                <option value="Defective Product">Defective Product</option>
                <option value="Not as Described">Not as Described</option>
                <option value="Better Alternative Found">Better Alternative Found</option>
                <option value="Quality Issues">Quality Issues</option>
                <option value="Other">Other</option>
            </select>
            <button class="btn btn-warning btn-sm return-product" 
                    data-order-id="<%= order._id %>" 
                    data-product-id="<%= order.orderedItems[i].product._id %>">
                Return
            </button>
        <% } %>
    <% } else { %>
        <button class="btn btn-secondary btn-sm" disabled>
            <%= order.orderedItems[i].status %>
        </button>
    <% } %>
</div>
                                        </div>
                                    </div>
                                    <% } %>
                            </div>
                        </div>

                        <!-- Order Summary Section -->
                      <!-- Order Summary Section -->
<div class="card mb-4">
    <div class="card-header">
        <h5>Order Summary</h5>
    </div>
    <div class="card-body">
        <p><strong>Order Date:</strong> <%= order.createOn.toLocaleDateString() %></p>
        <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
        <% if(order.discount > 0) { %>
            <p><strong>Discount Amount:</strong> 
                <span class="text-success">-â‚¹<%= order.discount %></span>
            </p>
        <% } %>
        <p><strong>Subtotal:</strong> â‚¹<%= order.totalPrice %></p>
        <p><strong>Total:</strong> â‚¹<%= order.finalAmount %></p>

        <!-- Add the download button right here, after the total -->
        <div class="mt-3">
            <a href="/download-invoice/<%= order._id %>" class="btn btn-primary">
                <i class="bi bi-download me-2"></i>Download Invoice
            </a>
        </div>
    </div>
</div>
                        <!-- Shipping Address Section -->
                        <div class="card">
                            <div class="card-header">
                                <h5>Shipping Address</h5>
                            </div>
                            <div class="card-body">
                                <% if (address) { %>
                                    <p>
                                        <%= address?.name || 'N/A' %><br>
                                            <%= address?.landMark || 'N/A' %>, <br>
                                                <%= address?.city || 'N/A' %>, <br>
                                                    <%= address?.state || 'N/A' %> <br>
                                                        <%= address?.pincode || 'N/A' %>
                                    </p>
                                    <% } %>
                            </div>
                        </div>
                    </div>
            </div>
        </div>

        <%- include("../../views/partials/user/footer") %>
            <!-- Include SweetAlert2 JS -->
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script>
                // Cancel Product
                // document.querySelectorAll('.cancel-product').forEach(button => {
                //     button.addEventListener('click', async () => {
                //         const orderId = button.getAttribute('data-order-id');
                //         const productId = button.getAttribute('data-product-id');

                //         // SweetAlert2 confirmation dialog
                //         const result = await Swal.fire({
                //             title: 'Are you sure?',
                //             text: "You won't be able to revert this!",
                //             icon: 'warning',
                //             showCancelButton: true,
                //             confirmButtonColor: '#3085d6',
                //             cancelButtonColor: '#d33',
                //             confirmButtonText: 'Yes, cancel it!'
                //         });

                //         // If user confirms, proceed with the cancellation
                //         if (result.isConfirmed) {
                //             try {
                //                 const response = await fetch('/order/cancel-product', {
                //                     method: 'POST',
                //                     headers: {
                //                         'Content-Type': 'application/json',
                //                     },
                //                     body: JSON.stringify({ orderId, productId }),
                //                 });

                //                 const result = await response.json();

                //                 if (result.success) {
                //                     Swal.fire({
                //                         icon: 'success',
                //                         title: 'Success!',
                //                         text: result.message,
                //                         confirmButtonText: 'OK',
                //                     }).then(() => {
                //                         location.reload(); // Refresh the page to reflect changes
                //                     });
                //                 } else {
                //                     Swal.fire({
                //                         icon: 'error',
                //                         title: 'Error!',
                //                         text: result.message,
                //                         confirmButtonText: 'OK',
                //                     });
                //                 }
                //             } catch (error) {
                //                 console.error('Error:', error);
                //                 Swal.fire({
                //                     icon: 'error',
                //                     title: 'Error!',
                //                     text: 'An error occurred while canceling the product.',
                //                     confirmButtonText: 'OK',
                //                 });
                //             }
                //         }
                //     });
                // });

                // // Return Product
                // document.querySelectorAll('.return-product').forEach(button => {
                //     button.addEventListener('click', async () => {
                //         const orderId = button.getAttribute('data-order-id');
                //         const productId = button.getAttribute('data-product-id');

                //         // SweetAlert2 confirmation dialog
                //         const result = await Swal.fire({
                //             title: 'Are you sure?',
                //             text: "You won't be able to revert this!",
                //             icon: 'warning',
                //             showCancelButton: true,
                //             confirmButtonColor: '#3085d6',
                //             cancelButtonColor: '#d33',
                //             confirmButtonText: 'Yes, return it!'
                //         });

                //         // If user confirms, proceed with the return
                //         if (result.isConfirmed) {
                //             try {
                //                 const response = await fetch('/order/return-product', {
                //                     method: 'POST',
                //                     headers: {
                //                         'Content-Type': 'application/json',
                //                     },
                //                     body: JSON.stringify({ orderId, productId }),
                //                 });

                //                 const result = await response.json();

                //                 if (result.success) {
                //                     Swal.fire({
                //                         icon: 'success',
                //                         title: 'Success!',
                //                         text: result.message,
                //                         confirmButtonText: 'OK',
                //                     }).then(() => {
                //                         location.reload();
                //                     });
                //                 } else {
                //                     Swal.fire({
                //                         icon: 'error',
                //                         title: 'Error!',
                //                         text: result.message,
                //                         confirmButtonText: 'OK',
                //                     });
                //                 }
                //             } catch (error) {
                //                 console.error('Error:', error);
                //                 Swal.fire({
                //                     icon: 'error',
                //                     title: 'Error!',
                //                     text: 'An error occurred while returning the product.',
                //                     confirmButtonText: 'OK',
                //                 });
                //             }
                //         }
                //     });
                // });

                document.querySelectorAll('.cancel-product').forEach(button => {
                    button.addEventListener('click', async () => {
                        const orderId = button.getAttribute('data-order-id');
                        const productId = button.getAttribute('data-product-id');

                        // Find the corresponding reason dropdown
                        const reasonDropdown = document.querySelector(`.cancel-reason[data-order-id="${orderId}"][data-product-id="${productId}"]`);
                        const cancellationReason = reasonDropdown.value;

                        // Validate that a reason is selected
                        if (!cancellationReason) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Oops...',
                                text: 'Please select a cancellation reason',
                                confirmButtonText: 'OK'
                            });
                            return;
                        }

                        // SweetAlert2 confirmation dialog
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: "You won't be able to revert this cancellation!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, cancel it!'
                        });

                        // If user confirms, proceed with the cancellation
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch('/order/cancel-product', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        orderId,
                                        productId,
                                        cancellationReason
                                    }),
                                });

                                const result = await response.json();

                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success!',
                                        text: result.message,
                                        confirmButtonText: 'OK',
                                    }).then(() => {
                                        location.reload(); // Refresh the page to reflect changes
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error!',
                                        text: result.message,
                                        confirmButtonText: 'OK',
                                    });
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: 'An error occurred while canceling the product.',
                                    confirmButtonText: 'OK',
                                });
                            }
                        }
                    });
                });

                //return
                document.querySelectorAll('.return-product').forEach(button => {
    button.addEventListener('click', async () => {
        try {
            const orderId = button.getAttribute('data-order-id');
            const productId = button.getAttribute('data-product-id');

            // Find the corresponding reason dropdown for this specific product
            const reasonDropdown = button.closest('.d-flex').querySelector('.return-reason');
            
            if (!reasonDropdown) {
                throw new Error('Return reason dropdown not found');
            }

            const returnReason = reasonDropdown.value;

            // Validate return reason
            if (!returnReason) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Return Reason Required',
                    text: 'Please select a reason for returning this product',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Confirmation dialog
            const confirmResult = await Swal.fire({
                title: 'Confirm Return',
                text: 'Are you sure you want to return this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, return it!'
            });

            if (!confirmResult.isConfirmed) {
                return;
            }

            // Submit return request
            const response = await fetch('/order/return-product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId,
                    productId,
                    returnReason
                }),
            });

            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Return Requested',
                    text: result.message,
                    confirmButtonText: 'OK'
                });
                location.reload();
            } else {
                throw new Error(result.message || 'Return request failed');
            }

        } catch (error) {
            console.error('Return request error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Return Request Failed',
                text: error.message || 'An error occurred while processing your return request',
                confirmButtonText: 'OK'
            });
        }
    });
});
            </script>
</body>

</html>