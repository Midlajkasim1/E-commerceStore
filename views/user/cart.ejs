<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="images/store-logo.png"> 
  <title>Urban row</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Breadcrumb styles */
    .breadcrumb a {
      color: #088178;
      text-decoration: none;
    }

    .breadcrumb span {
      margin: 0 10px;
      color: #666;
    }

    /* Cart Banner */
    .cart-banner {
      background: linear-gradient(rgba(17, 18, 18, 0.9), rgba(8, 129, 120, 0.8)), 
                  url('/api/placeholder/1200/300') center/cover;
      padding: 60px 0;
      margin-bottom: 40px;
      position: relative;
    }

    .banner-content {
      text-align: center;
      color: #ffffff;
    }

    .banner-content h1 {
      font-size: 42px;
      font-weight: 700;
      margin-bottom: 15px;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    /* Cart Item Styles */
    .cart-item {
      background: #ffffff;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
    }

    .cart-item:hover {
      transform: translateY(-5px);
    }

    .cart-item img {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 8px;
    }

    .item-details h5 {
      color: #2c3e50;
      margin-bottom: 10px;
    }

    .quantity-control {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .quantity-btn {
      background-color: #f1f1f1;
      border: none;
      padding: 5px 12px;
      border-radius: 5px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .quantity-btn:hover {
      background-color: #088178;
      color: white;
    }

    .remove-btn {
      color: #dc3545;
      border: none;
      background: none;
      padding: 5px;
      transition: all 0.3s ease;
    }

    .remove-btn:hover {
      color: #bb2d3b;
      transform: scale(1.1);
    }

    /* Cart Summary Styles */
    .cart-summary {
      background: #ffffff;
      border-radius: 12px;
      padding: 25px;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
      position: sticky;
      top: 20px;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e9ecef;
    }

    .total {
      font-size: 1.2em;
      font-weight: bold;
      color: #088178;
    }

    .checkout-btn {
      background-color: #088178;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 15px 30px;
      width: 100%;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .checkout-btn:hover {
      background-color: #066661;
      transform: translateY(-2px);
    }

    .continue-shopping {
      display: inline-block;
      color: #088178;
      text-decoration: none;
      margin-top: 15px;
      transition: all 0.3s ease;
    }

    .continue-shopping:hover {
      color: #066661;
      transform: translateX(-5px);
    }

    .continue-shopping i {
      margin-right: 5px;
    }

/* Pagination Styles */
.pagination {
  margin-top: 30px;
}

.pagination .page-item.active .page-link {
  background-color: #088178;
  border-color: #088178;
}

.pagination .page-link {
  color: #088178;
}

.pagination .page-link:hover {
  color: #066661;
}

.pagination .page-item.disabled .page-link {
  color: #6c757d;
}

@media (max-width: 768px) {
  footer .col-md-3 {
    text-align: center;
  }
  
  footer .input-group {
    margin: 0 auto;
  }
}



    @media (max-width: 768px) {
      .cart-banner {
        padding: 40px 0;
      }
      
      .banner-content h1 {
        font-size: 32px;
      }
      
      .cart-item {
        text-align: center;
      }
      
      .cart-item img {
        margin-bottom: 15px;
      }
      
      .quantity-control {
        justify-content: center;
        margin: 15px 0;
      }
      
      .footer-content {
            padding: 0 10px;
        }
    }
    
  </style>
</head>
<body>
  <%-include("../../views/partials/user/header")%>

  <div class="container my-4">
    <!-- Breadcrumb -->
    <div class="breadcrumb">
      <a href="/">Home</a>
      <span>/</span>
      <a href="/cart">Shopping Cart</a>
    </div>

    <!-- Cart Banner -->
    <div class="cart-banner">
      <div class="container">
        <div class="banner-content">
          <h1>Your Shopping Cart</h1>
        </div>
      </div>
    </div>



    <div class="row">
     <!-- Cart Items -->
  <div class="col-lg-8">
    <% if (cart && cart.length > 0) { %>
      <% cart.forEach(item => { %>
        <div class="cart-item" data-product-id="<%= item.productId %>">
          <div class="row align-items-center">
            <div class="col-md-2 col-12 mb-md-0 mb-3">
              <img src="/uploads/re-image/<%= item.productImage[0] %>" alt="<%= item.productName %>" class="img-fluid">
            </div>
            <div class="col-md-4 col-12 item-details">
              <h5><%= item.productName %></h5>
              <p class="text-muted mb-0">Size: <%= item.size %></p>
            </div>
            <div class="col-md-3 col-12">
              <div class="quantity-control">
                <form class="quantity-form d-flex align-items-center gap-2">
                  <input type="hidden" name="productId" value="<%= item.productId %>">
                  <input type="hidden" name="size" value="<%= item.size %>">
                  <button type="button" class="quantity-btn decrease-btn">-</button>
                  <span class="quantity-value"><%= item.quantity %></span>
                  <button type="button" class="quantity-btn increase-btn">+</button>
              </form>
              
            </div>
            </div>
            <div class="col-md-2 col-12 text-md-end text-center">
              <p class="mb-0">₹<%= item.totalPrice %></p>
            </div>
            <div class="col-md-1 col-12 text-md-end text-center">
              <form action="/cart/remove" method="POST" class="d-inline">
                <input type="hidden" name="productId" value="<%= item.productId %>">
                <input type="hidden" name="size" value="<%= item.size %>">
                <button type="submit" class="remove-btn">
                    <i class="bi bi-trash"></i>
                </button>
            </form>
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="text-center py-5">
        <h4>Your cart is empty</h4>
        <p>Looks like you haven't added anything to your cart yet.</p>
        <a href="/shop" class="continue-shopping">
          <i class="bi bi-arrow-left"></i> Continue Shopping
        </a>
      </div>
    <% } %>
  </div>

     
<!-- Cart Summary -->
<div class="col-lg-4">
  <div class="cart-summary">
      <h4 class="mb-4">Order Summary</h4>
      <% 
          let subtotal = 0;
          let shipping = 0;
          
          if (cart && cart.length > 0) {
              try {
                  subtotal = cart.reduce((total, item) => {
                      const itemPrice = Number(item.salePrice) || 0;
                      const itemQuantity = Number(item.quantity) || 0;
                      return total + (itemPrice * itemQuantity);
                  }, 0);
                  
                  // Only calculate shipping if cart has items
                  shipping = subtotal >= 2000 ? 0 : 100;
              } catch (err) {
                  subtotal = 0;
                  shipping = 0;
              }
          }
      %>
      
      <div class="summary-item">
          <span>Subtotal</span>
          <span>₹<%= subtotal.toFixed(2) %></span>
      </div>

      <% if (cart && cart.length > 0) { %>
          <% if (subtotal < 2000) { %>
              <div class="shipping-info text-muted">
                  <small>Add ₹<%= (2000 - subtotal).toFixed(2) %> more to get FREE delivery!</small>
              </div>
              <div class="summary-item">
                  <span>Delivery Charges</span>
                  <span>₹100.00</span>
              </div>
          <% } else { %>
              <div class="shipping-info text-success">
                  <small>Yay! You've got FREE delivery!</small>
              </div>
              <div class="summary-item">
                  <span>Delivery Charges</span>
                  <span class="text-success">FREE</span>
              </div>
          <% } %>
      <% } else { %>
          <div class="shipping-info text-muted">
              <small>Add items to your cart for delivery details</small>
          </div>
          <div class="summary-item">
              <span>Delivery Charges</span>
              <span>₹0.00</span>
          </div>
      <% } %>

      <div class="summary-item total">
          <span>Total</span>
          <span>₹<%= (subtotal + shipping).toFixed(2) %></span>
      </div>

      <% if (cart && cart.length > 0) { %>
          <button class="checkout-btn" onclick="window.location.href='/checkout'">Checkout</button>
      <% } %>
      
      <div class="text-center mt-3">
          <a href="/shop" class="continue-shopping">
              <i class="bi bi-arrow-left"></i> Continue Shopping
          </a>
      </div>
  </div>
  </div>
  </div>

  <% if (totalPages > 1) { %>
    <nav aria-label="Cart pagination" class="my-4">
      <ul class="pagination justify-content-center">
        <!-- Previous page button -->
        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
          <a class="page-link" href="/cart?page=<%= currentPage - 1 %>" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>
        
        <!-- Page numbers -->
        <% for(let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= i === currentPage ? 'active' : '' %>">
            <a class="page-link" href="/cart?page=<%= i %>"><%= i %></a>
          </li>
        <% } %>
        
        <!-- Next page button -->
        <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
          <a class="page-link" href="/cart?page=<%= currentPage + 1 %>" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
          </a>
        </li>
      </ul>
    </nav>
    
    <div class="text-center text-muted mb-4">
      <small>Showing <%= ((currentPage - 1) * itemsPerPage) + 1 %>-<%= Math.min(currentPage * itemsPerPage, totalItems) %> of <%= totalItems %> items</small>
    </div>
  <% } %>
  </div>

  <%-include("../../views/partials/user/footer")%>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">

  <script>
// Format price with Rupee symbol
function formatPrice(price) {
    return '₹' + parseFloat(price).toFixed(2);
}

document.addEventListener('DOMContentLoaded', function() {
    const sweetAlertCSS = document.createElement('link');
    sweetAlertCSS.rel = 'stylesheet';
    sweetAlertCSS.href = 'https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css';
    document.head.appendChild(sweetAlertCSS);

    const sweetAlertJS = document.createElement('script');
    sweetAlertJS.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';
    document.head.appendChild(sweetAlertJS);

    // Update cart summary function
    function updateCartSummary(totals) {
    if (!totals || typeof totals === 'number' || totals.subtotal === 0) {
        // Handle empty cart
        const summaryItems = document.querySelectorAll('.summary-item');
        
        // Update subtotal
        summaryItems[0].querySelector('span:last-child').textContent = '₹0.00';
        
        // Update shipping info
        const shippingInfo = document.querySelector('.shipping-info');
        if (shippingInfo) {
            shippingInfo.innerHTML = '<small>Add items to your cart for delivery details</small>';
            shippingInfo.className = 'shipping-info text-muted';
        }
        
        // Update shipping cost to ₹0
        if (summaryItems[1]) {
            summaryItems[1].querySelector('span:last-child').textContent = '₹0.00';
            summaryItems[1].querySelector('span:last-child').className = '';
        }
        
        // Update total
        const totalElement = document.querySelector('.total span:last-child');
        if (totalElement) {
            totalElement.textContent = '₹0.00';
        }
        
        // Hide checkout button
        const checkoutBtn = document.querySelector('.checkout-btn');
        if (checkoutBtn) checkoutBtn.style.display = 'none';
        
        return;
    }
    
    // Update for non-empty cart
    const summaryItems = document.querySelectorAll('.summary-item');
    
    // Update subtotal
    summaryItems[0].querySelector('span:last-child').textContent = `₹${totals.subtotal.toFixed(2)}`;
    
    // Update shipping info and cost
    const shippingInfo = document.querySelector('.shipping-info');
    const shippingCost = summaryItems[1].querySelector('span:last-child');
    
    if (totals.freeDeliveryEligible) {
        if (shippingInfo) {
            shippingInfo.innerHTML = '<small>Yay! You\'ve got FREE delivery!</small>';
            shippingInfo.className = 'shipping-info text-success';
        }
        shippingCost.textContent = 'FREE';
        shippingCost.className = 'text-success';
    } else {
        const remainingForFree = 2000 - totals.subtotal;
        if (shippingInfo) {
            shippingInfo.innerHTML = `<small>Add ₹${remainingForFree.toFixed(2)} more to get FREE delivery!</small>`;
            shippingInfo.className = 'shipping-info text-muted';
        }
        shippingCost.textContent = '₹100.00';
        shippingCost.className = '';
    }
    
    // Update total
    const totalElement = document.querySelector('.total span:last-child');
    if (totalElement) {
        totalElement.textContent = `₹${totals.total.toFixed(2)}`;
    }
}

    // Check for empty cart and update UI
    function checkEmptyCart() {
        const cartItems = document.querySelectorAll('.cart-item');
        if (cartItems.length === 0) {
            const cartContainer = document.querySelector('.col-lg-8');
            if (cartContainer) {
                cartContainer.innerHTML = `
                    <div class="text-center py-5">
                        <h4>Your cart is empty</h4>
                        <p>Looks like you haven't added anything to your cart yet.</p>
                        <a href="/shop" class="continue-shopping">
                            <i class="bi bi-arrow-left"></i> Continue Shopping
                        </a>
                    </div>
                `;
            }
            // Update summary with zeros
            updateCartSummary(0);
        }
    }

    // Handle quantity updates
    async function updateQuantity(productId, action, size, quantityElement) {
        try {
            const response = await fetch('/cart/update-quantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId, action, size })
            });

            const data = await response.json();

            if (!data.success) {
                Swal.fire({
                    icon: data.stockLimit ? 'warning' :'error',
                    title: data.stockLimit ? 'Stock Limit Reached' : 'Error',
                    text: data.message,
                    confirmButtonColor: '#088178'
                });
                return;
            }

            // Update quantity display
            quantityElement.textContent = data.newQuantity;

            // Update item total price
            const itemTotalElement = quantityElement.closest('.cart-item')
                .querySelector('.col-md-2 p');
            if (itemTotalElement) {
                itemTotalElement.textContent = `₹${data.newItemTotal}`;
            }

            // Update cart summary
            updateCartSummary(data.cartTotals);

        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to update cart',
                confirmButtonColor: '#088178'
            });
        }
    }

    // Handle item removal
    function attachRemoveHandlers() {
        document.querySelectorAll('.remove-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.preventDefault();

                // Show confirmation dialog
                const result = await Swal.fire({
                    title: 'Remove Item?',
                    text: 'Are you sure you want to remove this item from your cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#088178',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    const form = btn.closest('form');
                    const productId = form.querySelector('input[name="productId"]').value;
                    const size = form.querySelector('input[name="size"]').value;

                    try {
                        const response = await fetch('/cart/remove', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({ productId, size })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // Remove item from DOM
                            const cartItem = btn.closest('.cart-item');
                            cartItem.style.animation = 'fadeOut 0.3s ease';
                            
                            setTimeout(() => {
                                cartItem.remove();
                                checkEmptyCart();
                                const remainingItems = document.querySelectorAll('.cart-item').length;
                            if (remainingItems === 0 && document.querySelector('.pagination')) {
                                const currentPage = new URLSearchParams(window.location.search).get('page') || '1';
                                if (currentPage !== '1') {
                                    window.location.href = '/cart?page=' + (parseInt(currentPage) - 1);
                                    return;
                                }
                            }

                            }, 300);

                            // Show success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Item Removed',
                                text: 'The item has been removed from your cart',
                                confirmButtonColor: '#088178',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            if (data.cartTotals) {
                                updateCartSummary(data.cartTotals);
                            }
                        } else {
                            throw new Error(data.message || 'Failed to remove item');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to remove item',
                            confirmButtonColor: '#088178'
                        });
                    }
                }
            });
        });
    }

    // Attach quantity update handlers
    document.querySelectorAll('.quantity-control form').forEach(form => {
        const decreaseBtn = form.querySelector('.decrease-btn');
        const increaseBtn = form.querySelector('.increase-btn');
        const quantityElement = form.querySelector('.quantity-value');
        const productId = form.querySelector('input[name="productId"]').value;
        const size = form.querySelector('input[name="size"]').value;

        decreaseBtn.addEventListener('click', () => 
            updateQuantity(productId, 'decrease', size, quantityElement));
        increaseBtn.addEventListener('click', () => 
            updateQuantity(productId, 'increase', size, quantityElement));
    });

    // Initialize remove handlers
    attachRemoveHandlers();

    // Add necessary styles
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeOut {
            from { opacity: 1; transform: translateX(0); }
            to { opacity: 0; transform: translateX(-20px); }
        }
    `;
    document.head.appendChild(style);
});
  </script>
</body>
</html>
